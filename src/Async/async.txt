üîÅ ¬øQu√© es una funci√≥n as√≠ncrona?
.
La declaraci√≥n de funci√≥n async define una funci√≥n as√≠ncrona que devuelve un objeto, lo cual permite a un programa correr una funci√≥n sin congelar todo la compilaci√≥n.
Dada que la finalidad de las funciones async/await es simplificar el comportamiento del uso s√≠ncrono de promesas, se hace m√°s f√°cil escribir promesas.
.
üîè La estructura se compone por las palabras reservadas async y await:
.

La palabra async antes de la funci√≥n, hace que la funci√≥n devuelva una promesa.
La palabra await se utiliza dentro de las funciones async, lo que hace que el programa espere hasta que la variable(promesa) se resuelva para continuar.
.
‚úèÔ∏è Ejemplo con c√≥digo:
.

Ir a VSC, crear dentro de la carpeta src una carpeta llamada async.
En la ruta src/async crear el archivo index.js
Dentro del archivo index.js, se crea la promesa y luego se valida si la promesa se resolver√°, tambi√©n se hace el llamado de la misma y luego se busca mostrar como se desenvuelve con await. En el ejemplo se usa el if ternario.
.

üö• ¬øQu√© es un operador if ternario?
.
El operador ternario consta de 3 partes: condici√≥n ? expresi√≥n1 : expresi√≥n2;

La primera es la l√≥gica, se eval√∫a una condici√≥n.
La segunda parte est√° despu√©s del signo de cierre de interrogaci√≥n ?, √©sta se ejecuta solo si la condici√≥n es verdadera true.
La tercera parte est√° despu√©s del s√≠mbolo de dos puntos :, √©sta se ejecuta solo si la condici√≥n resulta falsa false.
Fuente: aqu√≠
Ejemplo:

var a = 5;
var b = 3;
var c = a > b ? "Es mayor" : "Es menor";
//Si la condici√≥n despu√©s del s√≠mbolo igual (=) se cumple, entonces se tendr√° el valor: ‚ÄúEs mayor‚Äù, de lo contrario tomar√° el valor: ‚ÄúEs menor‚Äù.

El c√≥digo en src/async/index.js queda as√≠:

const fnAsync = () =>{
    return new Promise((resolve, reject) =>{
        (true) //se us√≥ operador ternario y se est√° forzando con true que se cumpla la condici√≥n
            ? setTimeout(() => resolve('Async!!', 2000))
            : reject(new Error('Error!')); //arroja "error" en caso de que la condici√≥n sea false
    });
}

const anotherFn = async () => { //la palabra async es para el cuerpo de la funci√≥n
    //la palabra await estar√° dentro de la l√≥gica a implementar
    const something = await fnAsync(); //aqu√≠ nos est√° regresando una promesa
    console.log(something); //se imprime mientras se espera
    console.log('Hello!');
}

console.log('Before'); //al ser la primera orden con solo console.log, 'Before' se imprime primero
anotherFn();//es el segundo en llamar, pero a√∫n as√≠ no se imprimen los console de su l√≥gica y tarda 2 s en ser ejecutada
console.log('After'); //aparece justo despu√©s de 'Before' porque anotherFn() est√° esperando una promesa y a√∫n as√≠ el programa no se detiene, sino que sigue y as√≠ tenemos 'After' de segundo al imprimir

/*La salida al correr con Run Code queda:
Before
After
Async!!
Hello!
*/